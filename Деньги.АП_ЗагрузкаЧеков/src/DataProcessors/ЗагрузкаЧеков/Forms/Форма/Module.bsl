&НаСервере
Функция ПодготовитьЗаголовки()
	СисИнфо = Новый СистемнаяИнформация;
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Authorization", "Basic " + ЗашифроватьBase64(Логин + ":" + Пароль, "US-ASCII"));
	Заголовки.Вставить("Device-Id", СисИнфо.ИдентификаторКлиента);
	Заголовки.Вставить("Device-OS", СисИнфо.ВерсияОС);
	Возврат Заголовки;
КонецФункции

&НаСервере
Функция ПолучитьДанныеССайтаНалоговой(СтрокаАдреса)
	Заголовки = ПодготовитьЗаголовки();
	лПрокси = ПолучениеФайловИзИнтернетаКлиентСервер.ПолучитьПрокси("http");	
	HTTPСоединение = Новый HTTPСоединение("proverkacheka.nalog.ru", 8888,,,лПрокси);	
	HTTPЗапрос = Новый HTTPЗапрос(СтрокаАдреса, Заголовки);
	лСтрукт = HTTPСоединение.ПолучитьЗаголовки(HTTPЗапрос);
	Результат = HTTPСоединение.Получить(HTTPЗапрос);
	
	Если Результат.КодСостояния = 407 Тогда
		Сообщить ("Ошибка 407 (авторизация на Прокси)");
		Возврат Неопределено;
	ИначеЕсли Результат.КодСостояния = 404 Тогда
		Сообщить ("Ошибка 404 (страница не доступна. Проблема сайта (пути) или интернета?)");
		Возврат Неопределено;
	КонецЕсли;
	
	Попытка
		ТекстОтветаСервера = Результат.ПолучитьТелоКакСтроку("UTF-8");
		// Форматируем строку ответа для вывода
		Чтение = Новый ЧтениеJSON;
		Чтение.УстановитьСтроку(ТекстОтветаСервера);
		ОтветОбъектом = ПрочитатьJSON(Чтение);
	Исключение
		лСообщение = ОписаниеОшибки();
		ОтветСервера = Строка (ТекстОтветаСервера)+Символы.ПС+лСообщение;
		лСообщить  = Новый СообщениеПользователю;
		лСообщить.Текст = "Ошибка: "+лСообщение+". См.Ответ сервера на закладке Настройки. Если timeout - повторите снова.";
		лСообщить.Сообщить();
	КонецПопытки;
	
	Возврат ОтветОбъектом;
КонецФункции

&НаСервере
Процедура ЗагрузитьСписокНаСервере()
	ДатаОкончания = ПериодЗапроса.ДатаОкончания;
	Если ДатаОкончания > ТекущаяДата() Тогда
		ДатаОкончания = ТекущаяДата();
	КонецЕсли;
	СтрокаАдреса = "/v1/extract?dateFrom="+Формат(ПериодЗапроса.ДатаНачала,"ДФ=yyyy-MM-ddTHH:mm:ss")+ "&dateTo="+Формат(ДатаОкончания,"ДФ=yyyy-MM-ddTHH:mm:ss")+"&sendToEmail=0&fileType=json";
	
	// Запрашиваем выписку за период  с сайта налоговой
	Адрес = ПолучитьДанныеССайтаНалоговой(СтрокаАдреса);
	Если Адрес = Неопределено Тогда 
		Возврат; 
	КонецЕсли;	
	СтрокаАдреса = Адрес.url;
	
	// Получаем сам файл с выпиской
	СписокДокументов = ПолучитьДанныеССайтаНалоговой(СтрокаАдреса);
	Если СписокДокументов = Неопределено Тогда 
		Возврат; 
	КонецЕсли;
	ВывестиОтветСервера(СписокДокументов);
	СписокЧеков.Очистить();
	
	Для Каждого Чек из СписокДокументов Цикл
		ПолныйЧек = Чек.document.receipt;
		СтрокаЧеков = СписокЧеков.Добавить();
		СтрокаЧеков.Дата = ПолучитьДату(ПолныйЧек.dateTime);
		СтрокаЧеков.ИНН = СокрЛП(ПолныйЧек.userInn);	//БСА. Вставил СокрЛП
		Если ПолныйЧек.Свойство("user") Тогда
			СтрокаЧеков.Магазин = СокрЛП(ПолныйЧек.user);	//БСА. Вставил СокрЛП
		КонецЕсли;
		СтрокаЧеков.СуммаДокумента = ПолныйЧек.totalSum / 100;
		СтрокаЧеков.ФН = Формат(ПолныйЧек.fiscalDriveNumber,"ЧГ=0");
		СтрокаЧеков.ФП = Формат(ПолныйЧек.fiscalSign,"ЧГ=0");
		СтрокаЧеков.ФД = Формат(ПолныйЧек.fiscalDocumentNumber,"ЧГ=0");
		
		Если ЗначениеЗаполнено (ПолныйЧек.cashTotalSum) Тогда
			СтрокаЧеков.ФормаОплаты = "Наличные";
		ИначеЕсли ЗначениеЗаполнено (ПолныйЧек.ecashTotalSum) Тогда
			СтрокаЧеков.ФормаОплаты = "Карта";
		КонецЕсли;
		
		
		Запись = Новый ЗаписьJSON;
		Запись.УстановитьСтроку();
		ЗаписатьJSON(Запись,Чек);
		СтрокаЧеков.СодержимоеЧека = Запись.Закрыть();
		
		// Ищем документ самый ближний с нужной суммой
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2	
		|	Расход.Ссылка КАК Документ,
		|	Расход.Проведен Как Проведен	
		|ИЗ
		|	Документ.Расход КАК Расход
		|ГДЕ
		|   ВЫБОР 
		|       Когда Расход.СуммаОплаты > &СуммаРасхода 
		|           тогда Расход.СуммаОплаты - &СуммаРасхода 
		|       иначе &СуммаРасхода -  Расход.СуммаОплаты  
		|   КОНЕЦ < 1
		|	И НАЧАЛОПЕРИОДА(Расход.Дата, ДЕНЬ) = НАЧАЛОПЕРИОДА(&ДатаДокумента, ДЕНЬ)
		|	//УчитыватьКомментарий И Расход.Комментарий ПОДОБНО &Комментарий	
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВЫБОР
		|		КОГДА &ДатаДокумента > Расход.Дата
		|			ТОГДА -РАЗНОСТЬДАТ(&ДатаДокумента, Расход.Дата, СЕКУНДА)
		|		ИНАЧЕ РАЗНОСТЬДАТ(&ДатаДокумента, Расход.Дата, СЕКУНДА)
		|	КОНЕЦ";
		
		Запрос.УстановитьПараметр("СуммаРасхода", СтрокаЧеков.СуммаДокумента);
		Запрос.УстановитьПараметр("ДатаДокумента", СтрокаЧеков.Дата);
		Запрос.УстановитьПараметр("Комментарий", "%ФД="+СтрокаЧеков.ФД+"%");	//БСА. Вставка
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		// Если получилось больше одного документа - непорядок, включим отбор по комментарию
		Если ВыборкаДетальныеЗаписи.Количество() = 2 Тогда		
			Запрос.Текст = СтрЗаменить (Запрос.Текст, "//УчитыватьКомментарий", "");
			РезультатЗапроса = Запрос.Выполнить();
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		КонецЕсли;
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			СтрокаЧеков.ДокументРасхода = ВыборкаДетальныеЗаписи.Документ;
			СтрокаЧеков.ДокументРасходаПроведен = ВыборкаДетальныеЗаписи.Проведен;	//БСА. Вставка заполнения реквизита
		КонецЦикла;
	КонецЦикла;
	
	СписокЧеков.Сортировать("Дата Убыв");
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьНаСервере(ФН,ФД,ФП, Содержимое = Неопределено)
	// Если у нас содержимого чека нет - пытаемся получить его с сайта налоговой.
	Если Содержимое = Неопределено тогда
		СтрокаАдреса = "/v1/inns/*/kkts/*/fss/" + СокрЛП(ФН) + "/tickets/" + СокрЛП(ФД) + "?fiscalSign=" + СокрЛП(ФП) + "&sendToEmail=no";
		Содержимое = ПолучитьДанныеССайтаНалоговой(СтрокаАдреса);
		Если Содержимое = Неопределено Тогда 
			Возврат;
		КонецЕсли;
	КонецЕсли;
	ВывестиОтветСервера(Содержимое);
	
	Документ = Содержимое;
	Чек = Документ.document.receipt;
	
	ЭтотОбъект.Дата = ПолучитьДату(Чек.dateTime);
	ЭтотОбъект.СуммаДокумента = Чек.totalsum / 100;
	ИНН = Чек.userInn;
	СопоставитьМагазин();
	
	СписокТоваров = Чек.items;
	СоставЧека.Очистить();
	
	Для каждого СтрокаЧека из СписокТоваров Цикл
		НоваяСтрока = СоставЧека.Добавить();
		НоваяСтрока.СтатьяРасходов 	= Справочники.СтатьиРасходов.ПустаяСсылка();
		НоваяСтрока.Наименование 	= СокрЛП(СтрокаЧека.name);		
		НоваяСтрока.Цена 			= Число(СтрокаЧека.price)/100;
		НоваяСтрока.Количество 		= Число(СтрокаЧека.quantity);
		НоваяСтрока.Стоимость 		= Число(СтрокаЧека.sum)/100;
		НоваяСтрока.Сумма 			= НоваяСтрока.Цена * НоваяСтрока.Количество;
	КонецЦикла;
	
	СопоставитьСтатьи();
	
КонецПроцедуры

&НаСервереБезКонтекста
//Описание: В SQL запросе некоторые символы имеют значение шаблона, например "%" - любая строка. Поэтому такие символы
//	нужно экранировать.
//
//Параметры:
//		Стр	- (Строка) Исходная строка, проверяемая на наличии спец сиволов
//		КодСимволаЭкрана	- (Число) Код символа, которым экранируем (По-умолчанию ¥ (165, Йена), дополнительный µ (181))
//
//Возвращаемое значение:
//		(Структура) Стурктура с ключами: ЭкранированнаяСтрока, СпецСимвол. Если экранировать ничего не надо, СпецСимвол = "".
Функция ЭкранироватьСпецСимволы (Знач Стр, КодСимволаЭкрана = 165)
	СтрСпецСимволов = "%[]_";	//Строка шаблонных символов
	СтруктВозврата = Новый Структура ("ЭкранированнаяСтрока, СпецСимвол", Стр, "");
	лСтр = Стр;	//Рабочая строка
	Если Найти (лСтр, Символ (КодСимволаЭкрана)) = 0 Тогда	//Если символ экрана в строке не встречается, все хорошо
		лСимволЭкрана = Символ (КодСимволаЭкрана);
	Иначе	//Иначе возьмем дополнительный
		лСимволЭкрана = Символ (181);	
	КонецЕсли;
		
	ЕстьЭкран = Ложь;
	Для Сч = 1 По СтрДлина (СтрСпецСимволов) Цикл
		лСимв = Сред(СтрСпецСимволов, Сч, 1);
		Если СтрНайти (лСтр, лСимв) <> 0 Тогда	//Есть символ который надо экранировать
			ЕстьЭкран = Истина;
			лСтр = СтрЗаменить (Стр, лСимв, лСимволЭкрана+лСимв);
		КонецЕсли;
	КонецЦикла;
		//Последний этап - экранируем кавычки
	лСтр = СтрЗаменить (лСтр, """", """""");
	СтруктВозврата.Вставить("ЭкранированнаяСтрока", лСтр);
	Если ЕстьЭкран Тогда
		СтруктВозврата.Вставить("СпецСимвол", "СПЕЦСИМВОЛ """+лСимволЭкрана+""" ");	//Пробел в конце уже поставил
	КонецЕсли;
	Возврат СтруктВозврата;
КонецФункции

&НаСервере
//Описание: Второй вариант сопоставления статей, работает на четкое равенство наименования. Поскольку на регистр КлючевыеСловаОбъектов
//	наименование из чека пишется целиком, то и сравнить можно на равенство, иначе получается: 
//	1. Регистр растет и чем дальше, тем больше будет ВЫБРАТЬ и ПОДОБНО в запросе.
//	2. Если будет 2 строки "Сметана 15%" и "Сметана 15% 450 гр" и 2 соответствия, то для строки "Сметана 15% 450 гр" будет выбрана первое соответствие
//Другое дело, что в переделанном варианте не должно быть полных дублей ключевых слов, иначе строки начнут двоиться.
//
// Я в этом запросе явно перемудрил, но пока оставлю. 
Процедура СопоставитьСтатьи()
	лЗапрос = Новый Запрос;
	лЗапрос.Текст = 
		"ВЫБРАТЬ
		|	ВЫРАЗИТЬ(Т.Наименование КАК СТРОКА(250)) КАК Наименование,
		|	Т.Количество,
		|	Т.Цена,
		|	Т.Стоимость
		|ПОМЕСТИТЬ ТаблицаДанных
		|ИЗ
		|	&ТаблицаДанных КАК Т
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Расход.Дата,
		|	РасходРасходы.СтатьяРасходаИмущество КАК СтатьяРасхода,
		|	ТаблицаДанных.Наименование КАК ТекстРасхода
		|ПОМЕСТИТЬ ТаблицаСтатейРасходов
		|ИЗ
		|	ТаблицаДанных КАК ТаблицаДанных
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Расход.Расходы КАК РасходРасходы
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Расход КАК Расход
		|			ПО РасходРасходы.Ссылка = Расход.Ссылка
		|		ПО ((ВЫРАЗИТЬ(ТаблицаДанных.Наименование КАК СТРОКА(250))) = (ВЫРАЗИТЬ(РасходРасходы.КомментарийСтроки КАК СТРОКА(250))))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МаксДатыРасхода.ТекстРасхода,
		|	МАКСИМУМ(МаксДатыРасхода.Дата) КАК Дата
		|ПОМЕСТИТЬ ДатыСтатей
		|ИЗ
		|	ТаблицаСтатейРасходов КАК МаксДатыРасхода
		|
		|СГРУППИРОВАТЬ ПО
		|	МаксДатыРасхода.ТекстРасхода
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаСтатейРасходов.СтатьяРасхода,
		|	ТаблицаСтатейРасходов.ТекстРасхода
		|ПОМЕСТИТЬ СтатьиРасходов
		|ИЗ
		|	ДатыСтатей КАК ДатыСтатей
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаСтатейРасходов КАК ТаблицаСтатейРасходов
		|		ПО ДатыСтатей.Дата = ТаблицаСтатейРасходов.Дата
		|			И ДатыСтатей.ТекстРасхода = ТаблицаСтатейРасходов.ТекстРасхода
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА СтатьиРасходов.СтатьяРасхода ЕСТЬ NULL
		|			ТОГДА ЕСТЬNULL(КлючевыеСловаОбъектов.Объект, ЗНАЧЕНИЕ(Справочник.СтатьиРасходов.ПустаяСсылка))
		|		ИНАЧЕ СтатьиРасходов.СтатьяРасхода
		|	КОНЕЦ КАК СтатьяРасходов,
		|	ТаблицаДанных.Наименование,
		|	ТаблицаДанных.Количество,
		|	ТаблицаДанных.Цена,
		|	ТаблицаДанных.Стоимость
		|ИЗ
		|	ТаблицаДанных КАК ТаблицаДанных
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КлючевыеСловаОбъектов КАК КлючевыеСловаОбъектов
		|		ПО (КлючевыеСловаОбъектов.ИдентификаторОбъекта = &ИдентификаторОбъектаСтатьяРасходов)
		|			И ТаблицаДанных.Наименование = КлючевыеСловаОбъектов.КлючевоеСлово
		|		ЛЕВОЕ СОЕДИНЕНИЕ СтатьиРасходов КАК СтатьиРасходов
		|		ПО ТаблицаДанных.Наименование = СтатьиРасходов.ТекстРасхода";
	лЗапрос.УстановитьПараметр("ТаблицаДанных", РеквизитФормыВЗначение("СоставЧека"));
	лЗапрос.УстановитьПараметр("ИдентификаторОбъектаСтатьяРасходов", ИдентификаторОбъектаСтатьяРасходов);
	СоставЧека.Загрузить(лЗапрос.Выполнить().Выгрузить());
	
	Для Каждого Стр Из СоставЧека Цикл
		Стр.Наименование = СокрП(Стр.Наименование);
		Если НЕ ЗначениеЗаполнено(Стр.СтатьяРасходов) Тогда
			Стр.СтатьяРасходов = ПолучитьСтатьюПоНаименованиюКлючевыеСлова(Стр.Наименование);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура Получить(Команда)
	ПолучитьНаСервере(ПолеФН,ПолеФД, ПолеФП);
	Если СоставЧека.Количество() > 0 Тогда
		Элементы.ЕстьСкидки.Доступность = Истина;
	КонецЕсли;
	//Для Каждого Стр Из СоставЧека Цикл
	//	Если НЕ ЗначениеЗаполнено(Стр.СтатьяРасходов) Тогда
	//		Стр.СтатьяРасходов = ПолучитьСтатьюПоНаименованиюКлючевыеСлова(Стр.Наименование);
	//	КонецЕсли;
	//КонецЦикла;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Функция ЗашифроватьBase64(Строка, Кодировка)
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	
	ЗаписьТекста = Новый ЗаписьТекста(ИмяВременногоФайла, Кодировка);
	ЗаписьТекста.Записать(Строка);
	ЗаписьТекста.Закрыть();
	
	Двоичные = Новый ДвоичныеДанные(ИмяВременногоФайла);
	Результат = Base64Строка(Двоичные);
	Если Лев(Результат, 4) = "77u/" Тогда
		Результат = Сред(Результат, 5);
	КонецЕсли; 
	Результат = СтрЗаменить(Результат, Символы.ПС, "");
	
	УдалитьФайлы(ИмяВременногоФайла);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПеренестиВДокумент(Команда)
	
	ДокСсылка = ЭтотОбъект.Расход;
	ДокСсылка = ПеренестиВДокументНаСервере(ДокСсылка);
	
	Если ЗначениеЗаполнено(Магазин) Тогда
		НазначитьКлючевыеСловаНаСервере(Магазин, ИдентификаторОбъектаКонтакты, ИНН);
	КонецЕсли;

	//Для Каждого Стр Из СоставЧека Цикл
	//	Если НЕ Стр.ЕстьСоответствие = Истина Тогда
	//		//НазначитьКлючевыеСловаНаСервере(Стр.СтатьяРасходов, ИдентификаторОбъектаСтатьяРасходов, Стр.Наименование);
	//	КонецЕсли;
	//КонецЦикла;
	
	ПоказатьЗначение(,ДокСсылка);
	
КонецПроцедуры

&НаКлиенте
Процедура РасходПриИзменении(Элемент)	
	Реквизиты = ПолучитьРеквизитыЧека(ЭтотОбъект.Расход);
	Если ЗначениеЗаполнено (Реквизиты.fn) Тогда	//БСА. Вставил условие, чтобы не зачистить
		ПолеФН = Реквизиты.fn;
	КонецЕсли;
	Если ЗначениеЗаполнено (Реквизиты.fp) Тогда	//БСА. Вставил условие, чтобы не зачистить
		ПолеФП = Реквизиты.fp;
	КонецЕсли;
	Если ЗначениеЗаполнено (Реквизиты.i) Тогда	//БСА. Вставил условие, чтобы не зачистить
		ПолеФД = Реквизиты.i;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьРеквизитыЧека(ДокСсылка)
	СтруктураРеквизитов = Новый Структура("fn,fp,i");
	СтрокаКомментарий = Сред(ДокСсылка.Комментарий,СтрНайти(ДокСсылка.Комментарий,"fn"));
	СтрокаКомментарий = СтрЗаменить(СтрокаКомментарий," ", Символы.ПС);
	ВсегоСтрок = СтрЧислоСтрок(СтрокаКомментарий);
	Для НомерТекущейСтроки = 1 по ВсегоСтрок Цикл
		ТекСтрока = СтрПолучитьСтроку(СтрокаКомментарий,НомерТекущейСтроки);
		Если СтрНайти(ТекСтрока,"=") > 0 Тогда
			ТекСтрока = СтрЗаменить(ТекСтрока,"=", Символы.ПС);
			СтруктураРеквизитов.Вставить(СтрПолучитьСтроку(ТекСтрока,1),СтрПолучитьСтроку(ТекСтрока,2));
		КонецЕсли;
	КонецЦикла;
	Возврат СтруктураРеквизитов;
КонецФункции

&НаСервере
//Описание: Методы из АналитикаСтатей работают в больщинстве своем с формой... А нам надо заполнить программно.
Функция ПолучитьАктуальныйНаборАналитики (ДокОбъект)
	ИспользоватьАналитикуВНовыхОперациях = ПолучитьФункциональнуюОпцию("ИспользоватьАналитикуСтатей");
	Если Не ИспользоватьАналитикуВНовыхОперациях Тогда Возврат Неопределено; КонецЕсли;
	//РеквизитыДокумента = АналитикаСтатей.ПолучитьТаблицуРеквизитовАналитикиДокумента(Документы.Расход.Метаданные(), "", "", "СтатьяРасходаИмущество", "АналитикаСтатьи");
	ТаблицаРеквизитов = Новый ТаблицаЗначений;
	ТаблицаРеквизитов.Колонки.Добавить("ИмяТабличнойЧасти",            Новый ОписаниеТипов("Строка"));
	ТаблицаРеквизитов.Колонки.Добавить("ИмяРеквизитаСтатьи",           Новый ОписаниеТипов("Строка"));
	ТаблицаРеквизитов.Колонки.Добавить("ИмяРеквизитаПакетаАналитики",  Новый ОписаниеТипов("Строка"));
	ТаблицаРеквизитов.Колонки.Добавить("ЭтоДоход",                     Новый ОписаниеТипов("Булево"));
	ТаблицаРеквизитов.Колонки.Добавить("ЭтоРасход",                    Новый ОписаниеТипов("Булево"));
	
	СтрРеквизитов = ТаблицаРеквизитов.Добавить();
	СтрРеквизитов.ИмяТабличнойЧасти = "Расходы"; СтрРеквизитов.ИмяРеквизитаСтатьи = "СтатьяРасходаИмущество";
	СтрРеквизитов.ИмяРеквизитаПакетаАналитики = "АналитикаСтатьи"; СтрРеквизитов.ЭтоДоход = Ложь; СтрРеквизитов.ЭтоРасход = Истина;
	//АналитикаСтатей.ПолучитьАктуальныйНаборАналитики (, ТаблицаРеквизитов)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИспользоватьДляДоходов",  Ложь);
	Запрос.УстановитьПараметр("ИспользоватьДляРасходов", Истина);
	Запрос.УстановитьПараметр("ИмяВидаДокумента",  "Расход");
	
	// Собираем в таблицу все наборы значений аналитики, сохраненные в документе:
	ПакетыАналитики = Новый ТаблицаЗначений;
	ПакетыАналитики.Колонки.Добавить("ПакетАналитики",                Новый ОписаниеТипов("СправочникСсылка.ЗначенияСубконтоАналитика"));
	ПакетыАналитики.Колонки.Добавить("ИспользоватьДляДохода",         Новый ОписаниеТипов("Булево"));
	ПакетыАналитики.Колонки.Добавить("ИспользоватьДляРасхода",        Новый ОписаниеТипов("Булево"));
	ПакетыАналитики.Колонки.Добавить("РедактироватьВШапке",           Новый ОписаниеТипов("Булево"));
		//БСА. Если таблица Расходы заполнена и 
	Для каждого ТабличнаяЧасть Из ТаблицаРеквизитов Цикл
		// Значение реквизита табличной части
		Для каждого СтрокаТабЧасти Из ДокОбъект[ТабличнаяЧасть.ИмяТабличнойЧасти] Цикл
				//БСА. заполнен реквизит строки АналитикаСтатьи, то 
			Если ЗначениеЗаполнено(СтрокаТабЧасти[ТабличнаяЧасть.ИмяРеквизитаПакетаАналитики]) Тогда
				СтрокаАналитики = ПакетыАналитики.Добавить();		//БСА. Добавляем аналитику в Пакет
				СтрокаАналитики.ПакетАналитики = СтрокаТабЧасти[ТабличнаяЧасть.ИмяРеквизитаПакетаАналитики];
				СтрокаАналитики.ИспользоватьДляДохода   = ТабличнаяЧасть.ЭтоДоход;
				СтрокаАналитики.ИспользоватьДляРасхода  = ТабличнаяЧасть.ЭтоРасход;
			КонецЕсли; 
		КонецЦикла;
	КонецЦикла;
	
	ПакетыАналитики.Свернуть("ПакетАналитики", "ИспользоватьДляДохода, ИспользоватьДляРасхода, РедактироватьВШапке");
	Запрос.УстановитьПараметр("ПакетыАналитики", ПакетыАналитики);
	Запрос.УстановитьПараметр("ПрименятьНастройкиАналитики", ПакетыАналитики.Количество() = 0 И ДокОбъект.Ссылка.Пустая());
		//БСА. Общая аналитика документа, определяется наличием табличной части АналитикаДокумента
	ОбщаяАналитикаДокумента = ДокОбъект.АналитикаДокумента.Выгрузить();
		
		// Если отсутствуют реквизиты ИспользоватьДляДохода, ИспользоватьДляРасхода, значит в документе есть или только доход, или только расход.
	ОбщаяАналитикаДокумента.Колонки.Добавить("ИспользоватьДляДохода", Новый ОписаниеТипов("Булево"));
	ОбщаяАналитикаДокумента.ЗаполнитьЗначения(Ложь, "ИспользоватьДляДохода");
	ОбщаяАналитикаДокумента.Колонки.Добавить("ИспользоватьДляРасхода", Новый ОписаниеТипов("Булево"));
	ОбщаяАналитикаДокумента.ЗаполнитьЗначения(Истина, "ИспользоватьДляРасхода");
		
	Запрос.УстановитьПараметр("ОбщаяАналитикаДокумента", ОбщаяАналитикаДокумента);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОбщаяАналитикаДокумента.ВидАналитики,
	|	ОбщаяАналитикаДокумента.РедактироватьВШапке,
	|	ОбщаяАналитикаДокумента.ЗначениеАналитикиВШапке,
	|	ОбщаяАналитикаДокумента.ИспользоватьДляДохода,
	|	ОбщаяАналитикаДокумента.ИспользоватьДляРасхода
	|ПОМЕСТИТЬ ОбщаяАналитикаДокумента
	|ИЗ
	|	&ОбщаяАналитикаДокумента КАК ОбщаяАналитикаДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПакетыАналитики.ПакетАналитики,
	|	ПакетыАналитики.ИспользоватьДляДохода,
	|	ПакетыАналитики.ИспользоватьДляРасхода,
	|	ПакетыАналитики.РедактироватьВШапке
	|ПОМЕСТИТЬ ПакетыАналитикиДокумента
	|ИЗ
	|	&ПакетыАналитики КАК ПакетыАналитики
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АктуальнаяАналитика.ВидАналитики,
	|	АктуальнаяАналитика.ВидАналитики.ТипЗначения КАК ТипЗначенияАналитики,
	|	АктуальнаяАналитика.ВидАналитики.Наименование КАК НаименованиеАналитики,
	|	АктуальнаяАналитика.ИспользоватьДляДохода,
	|	АктуальнаяАналитика.ИспользоватьДляРасхода,
	|	АктуальнаяАналитика.РедактироватьВШапке,
	|	АктуальнаяАналитика.ВидАналитики.ЗначениеАналитикиДохода КАК ЗначениеАналитикиДоходаПоУмолчанию,
	|	АктуальнаяАналитика.ВидАналитики.ЗначениеАналитикиРасхода КАК ЗначениеАналитикиРасходаПоУмолчанию,
	|	АктуальнаяАналитика.ВидАналитики.РасширенныеНастройкиДляДохода КАК РасширенныеНастройкиДляДохода,
	|	АктуальнаяАналитика.ВидАналитики.РасширенныеНастройкиДляРасхода КАК РасширенныеНастройкиДляРасхода
	|ИЗ
	|	(ВЫБРАТЬ
	|		Сбор.ВидАналитики КАК ВидАналитики,
	|		МАКСИМУМ(Сбор.ИспользоватьДляДохода) КАК ИспользоватьДляДохода,
	|		МАКСИМУМ(Сбор.ИспользоватьДляРасхода) КАК ИспользоватьДляРасхода,
	|		ВЫБОР
	|			КОГДА МАКСИМУМ(Сбор.РедактироватьВШапкеПриоритет) = 1
	|				ТОГДА МАКСИМУМ(Сбор.РедактироватьВШапке1)
	|			КОГДА МАКСИМУМ(Сбор.РедактироватьВШапкеПриоритет) = 2
	|				ТОГДА МАКСИМУМ(Сбор.РедактироватьВШапке2)
	|			КОГДА МАКСИМУМ(Сбор.РедактироватьВШапкеПриоритет) = 3
	|				ТОГДА МАКСИМУМ(Сбор.РедактироватьВШапке3)
	|		КОНЕЦ КАК РедактироватьВШапке
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ВидыАналитик.Ссылка КАК ВидАналитики,
	|			(ВидыАналитик.РасширенныеНастройкиДляДохода)
	|				И ВидыАналитик.АктуальнаДляДохода КАК ИспользоватьДляДохода,
	|			(ВидыАналитик.РасширенныеНастройкиДляРасхода)
	|				И ВидыАналитик.АктуальнаДляРасхода КАК ИспользоватьДляРасхода,
	|			1 КАК РедактироватьВШапкеПриоритет,
	|			ВЫБОР
	|				КОГДА &ИспользоватьДляДоходов
	|						И &ИспользоватьДляРасходов
	|					ТОГДА ВидыАналитик.РедактироватьВШапкеДляДохода
	|							И ВидыАналитик.РедактироватьВШапкеДляРасхода
	|				КОГДА &ИспользоватьДляДоходов
	|					ТОГДА ВидыАналитик.РедактироватьВШапкеДляДохода
	|				КОГДА &ИспользоватьДляРасходов
	|					ТОГДА ВидыАналитик.РедактироватьВШапкеДляРасхода
	|			КОНЕЦ КАК РедактироватьВШапке1,
	|			NULL КАК РедактироватьВШапке2,
	|			NULL КАК РедактироватьВШапке3
	|		ИЗ
	|			ПланВидовХарактеристик.ВидыАналитик КАК ВидыАналитик
	|		ГДЕ
	|			НЕ ВидыАналитик.ПометкаУдаления
	|			И (&ИспользоватьДляДоходов
	|						И ВидыАналитик.АктуальнаДляДохода
	|					ИЛИ &ИспользоватьДляРасходов
	|						И ВидыАналитик.АктуальнаДляРасхода)
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			НастройкиАналитики.ВидАналитики,
	|			&ИспользоватьДляДоходов
	|				И НастройкиАналитики.ВидАналитики.АктуальнаДляДохода,
	|			&ИспользоватьДляРасходов
	|				И НастройкиАналитики.ВидАналитики.АктуальнаДляРасхода,
	|			2,
	|			NULL,
	|			НастройкиАналитики.РедактироватьВШапке,
	|			NULL
	|		ИЗ
	|			РегистрСведений.НастройкиАналитикиВДокументахПоУмолчанию КАК НастройкиАналитики
	|		ГДЕ
	|			НастройкиАналитики.ВидДокумента = &ИмяВидаДокумента
	|			И &ПрименятьНастройкиАналитики
	|			И НЕ НастройкиАналитики.ВидАналитики.ПометкаУдаления
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ОбщаяАналитикаДокумента.ВидАналитики,
	|			ОбщаяАналитикаДокумента.ИспользоватьДляДохода,
	|			ОбщаяАналитикаДокумента.ИспользоватьДляРасхода,
	|			3,
	|			NULL,
	|			NULL,
	|			ОбщаяАналитикаДокумента.РедактироватьВШапке
	|		ИЗ
	|			ОбщаяАналитикаДокумента КАК ОбщаяАналитикаДокумента
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ВидыАналитикиИзДокумента.ВидАналитики,
	|			ПакетыАналитикиДокумента.ИспользоватьДляДохода,
	|			ПакетыАналитикиДокумента.ИспользоватьДляРасхода,
	|			3,
	|			NULL,
	|			NULL,
	|			ЛОЖЬ
	|		ИЗ
	|			ПакетыАналитикиДокумента КАК ПакетыАналитикиДокумента
	|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЗначенияСубконтоАналитика.ВидыИЗначенияАналитики КАК ВидыАналитикиИзДокумента
	|				ПО ПакетыАналитикиДокумента.ПакетАналитики = ВидыАналитикиИзДокумента.Ссылка) КАК Сбор
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Сбор.ВидАналитики) КАК АктуальнаяАналитика
	|ГДЕ
	|	НЕ АктуальнаяАналитика.ВидАналитики ЕСТЬ NULL 
	|
	|УПОРЯДОЧИТЬ ПО
	|	АктуальнаяАналитика.ВидАналитики.Наименование";
		
	ТаблицаАналитики = Запрос.Выполнить().Выгрузить();
	ТаблицаАналитики.Колонки.Добавить("ИДАналитики"); // идентификатор, из которого будут получаться имена реквизитов и элементов формы
	Возврат ТаблицаАналитики;
КонецФункции

&НаСервере
Функция ПеренестиВДокументНаСервере(ДокСсылка)
	
	ТаблицаЗначений = РеквизитФормыВЗначение("СоставЧека");
	
	Если ЗначениеЗаполнено(ДокСсылка) Тогда
		ДокументОбъект = ДокСсылка.ПолучитьОбъект();			
	Иначе
		ДокументОбъект = Документы.Расход.СоздатьДокумент();
		ДокументОбъект.Заполнить(Неопределено);
		ДокументОбъект.Дата = ЭтотОбъект.Дата;
		ДокументОбъект.СуммаЧека = ЭтотОбъект.СуммаДокумента;
		Если ЗначениеЗаполнено (ЭтаФорма.Кошелек) Тогда
			ДокументОбъект.КошелекДолг = ЭтаФорма.Кошелек;
		КонецЕсли;
	КонецЕсли;
		//Сформируем таблицу аналитики
	лТЗАналитики = АналитикаСтатей.НоваяТаблицаВидИЗначениеАналитики();
	лТЗАналитики.Колонки.Добавить("РедактироватьВШапке", Новый ОписаниеТипов("Булево"));	//Добавим поле для определения, что можно менять
		//Получим набор аналитики по Объекту
	НаборАналитики = ПолучитьАктуальныйНаборАналитики (ДокументОбъект);
		//Выберем только аналитики используемые в Расходе
	МасСтр = НаборАналитики.НайтиСтроки (Новый Структура ("ИспользоватьДляРасхода", Истина));
		//Заполним таблицу аналитики, так получим значения по-умолчанию, которые заполняются в шапке.
	Для Каждого СтрНабораАналитики Из МасСтр Цикл
		Если лТЗАналитики.Найти (СтрНабораАналитики.ВидАналитики, "ВидАналитики") = Неопределено Тогда	//Хотя вроде бы лишнее условие
			СтрАналитики = лТЗАналитики.Добавить ();
			ЗаполнитьЗначенияСвойств (СтрАналитики, СтрНабораАналитики);
			СтрАналитики.ЗначениеАналитики = СтрНабораАналитики.ЗначениеАналитикиРасходаПоУмолчанию;
			Если СтрАналитики.РедактироватьВШапке И Не ЗначениеЗаполнено (СтрАналитики.ЗначениеАналитики) Тогда	//Стоит флаг редактирования в шапке, а значения по-умолчанию нет.
				//СтрАналитики.РедактироватьВШапке = Ложь;	//Сбросим флаг. Хотя может лучше оставить? Тут вопрос в том, заполять ли данную аналитику из СтатьиРасхода
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
		//Заполнение аналитики Магазина
	Если ЗначениеЗаполнено(Магазин) Тогда
				//Прямой поиск...
		АналитикаМагазин = лТЗАналитики.Найти (ПланыВидовХарактеристик.ВидыАналитик.МестоТраты, "ВидАналитики");
		Если АналитикаМагазин = Неопределено Тогда	//Получается, что аналитика не используется, но мы добавим
			АналитикаМагазин = лТЗАналитики.Добавить ();
			АналитикаМагазин.ВидАналитики = ПланыВидовХарактеристик.ВидыАналитик.МестоТраты;
		КонецЕсли;
		АналитикаМагазин.ЗначениеАналитики = ЭтотОбъект.Магазин;	
		АналитикаМагазин.РедактироватьВШапке = Истина;	//На всякий случай поставим, что редактируется в шапке.
	КонецЕсли;
	
	ДокументОбъект.Расходы.Очистить();
	
	ТаблицаЗначений.Свернуть("СтатьяРасходов,Наименование","Количество,Скидка,Стоимость");
	
	Для Каждого Строка Из ТаблицаЗначений Цикл
		НоваяСтрока = ДокументОбъект.Расходы.Добавить();
		НоваяСтрока.СтатьяРасходаИмущество = Строка.СтатьяРасходов;
		Если Строка.СтатьяРасходов.КоличественныйУчет Тогда
			НоваяСтрока.Количество = Строка.Количество;
		КонецЕсли;
		НоваяСтрока.Скидка = Строка.Скидка;
		НоваяСтрока.СкидкаВведенаВручную = Строка.Скидка > 0;
		НоваяСтрока.Сумма = Строка.Стоимость;
		НоваяСтрока.КомментарийСтроки = СокрЛП(Строка.Наименование);
		РасширеннаяАналитика = АналитикаСтатей.ПолучитьРасширеннуюАналитикуДляСтатьи(Строка.СтатьяРасходов);
		Для Каждого СтрРасшАналитики Из РасширеннаяАналитика Цикл
			Если Не СтрРасшАналитики.Использовать Тогда Продолжить; КонецЕсли;	//Есть такое поле будем проверять.
			СтрАналитики = лТЗАналитики.Найти (СтрРасшАналитики.ВидАналитики, "ВидАналитики");
			Если СтрАналитики = Неопределено Тогда	//Вопрос - добавлять или нет. Пока не буду.
				Продолжить;
			ИначеЕсли СтрАналитики.РедактироватьВШапке Тогда	//Редактируемые в шапке тоже пропускаем.
				Продолжить;
			КонецЕсли;
				//Ну а здесь заполним аналитику
			СтрАналитики.ЗначениеАналитики = СтрРасшАналитики.ЗначениеПоУмолчанию;
		КонецЦикла;
			//Преобразуем таблицу в ссылку
		НоваяСтрока.АналитикаСтатьи = АналитикаСтатей.ПолучитьСсылкуНаНаборЗначенийАналитик (лТЗАналитики);
	КонецЦикла;
		//Сохраним аналитику в документ
	ДокументОбъект.АналитикаДокумента.Очистить();
	Для Каждого СтрАналитика Из лТЗАналитики Цикл
		СтрАналитикиДок = ДокументОбъект.АналитикаДокумента.Добавить();
		ЗаполнитьЗначенияСвойств (СтрАналитикиДок, СтрАналитика);
		Если СтрАналитикиДок.РедактироватьВШапке Тогда
			СтрАналитикиДок.ЗначениеАналитикиВШапке = СтрАналитика.ЗначениеАналитики;
		КонецЕсли;
	КонецЦикла;
	
	ДокументОбъект.Комментарий = СформироватьКомментарийСПараметрамиЧека(ДокументОбъект);
	ДокументОбъект.Записать();
	
	// Заполнения поля документа, чтобы не создавалось 2-й раз
	Попытка
		ЭтаФорма.Расход = ДокументОбъект.Ссылка;
		СтрокаТаблицы = СписокЧеков.НайтиПоИдентификатору(Элементы.СписокЧеков.ТекущаяСтрока);
		СтрокаТаблицы.ДокументРасхода = ДокументОбъект.Ссылка;
		СтрокаТаблицы.ДокументРасходаПроведен = ДокументОбъект.Ссылка.Проведен;
	Исключение
	КонецПопытки;
	
	Возврат ДокументОбъект.Ссылка;

КонецФункции

&НаКлиенте
Процедура СоставЧекаКоличествоПриИзменении(Элемент)
	Данные = Элементы.СоставЧека.ТекущиеДанные;
	Данные.Цена = Данные.Стоимость / Данные.Количество;
КонецПроцедуры

&НаКлиенте
Процедура СоставЧекаСкидкаПриИзменении(Элемент)
Данные = Элементы.СоставЧека.ТекущиеДанные;
Данные.Сумма = Данные.Стоимость + Данные.Скидка;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура НазначитьКлючевыеСловаНаСервере(СтатьяРасходов, ИдентификаторОбъекта, КлючевоеСлово)
	
	НаборЗаписей = РегистрыСведений.КлючевыеСловаОбъектов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.КлючевоеСлово.Установить(КлючевоеСлово);
	
	Запись = НаборЗаписей.Добавить();
	Запись.КлючевоеСлово = КлючевоеСлово;
	Запись.ИдентификаторОбъекта = ИдентификаторОбъекта;
	Запись.Объект = СтатьяРасходов;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура ЕстьСкидкиПриИзменении(Элемент)
	Элементы.СоставЧека.ПодчиненныеЭлементы.СоставЧекаСкидка.Видимость = Истина;
	Элементы.СоставЧека.ПодчиненныеЭлементы.СоставЧекаСумма.Видимость = Истина;
	Для Каждого Стр Из СоставЧека Цикл
		Стр.Сумма = Стр.Цена * Стр.Количество;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура СопоставитьМагазин()
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
	                      |	Т.КлючевоеСлово,
	                      |	Т.Объект как Объект
	                      |ИЗ
	                      |	РегистрСведений.КлючевыеСловаОбъектов КАК Т
	                      |ГДЕ
	                      |	Т.ИдентификаторОбъекта = &ИдентификаторОбъектаКонтакты
						  |	И Т.КлючевоеСлово = &Магазин");
	Запрос.УстановитьПараметр("ИдентификаторОбъектаКонтакты", ЭтотОбъект.ИдентификаторОбъектаКонтакты);
	Запрос.УстановитьПараметр("Магазин", ЭтотОбъект.ИНН);	
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ЭтотОбъект.Магазин = Выборка.Объект;
	Иначе
		ЭтотОбъект.Магазин = Неопределено;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СоставЧекаСтатьяРасходовСоздание(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ФормаРасхода = ПолучитьФорму("Справочник.СтатьиРасходов.Форма.ФормаЭлемента");
	ФормаРасхода.Объект.Наименование = Элементы.СоставЧека.ТекущиеДанные.Наименование;
    ФормаРасхода.Открыть();	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьСписок(Команда)
	ЗагрузитьСписокНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьВыделенныйЧек(Команда)
	
	ВыделенныеСтроки = Элементы.СписокЧеков.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество()=1 Тогда
		ЗагрузитьВыделенныйЧекСервер();
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.Основное;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьВыделенныйЧекСервер()
	ТекСтрока = Элементы.СписокЧеков.ТекущаяСтрока;	
	СтрокаТаблицы = СписокЧеков.НайтиПоИдентификатору(ТекСтрока);
	ПолеФН = СтрокаТаблицы.ФН; ПолеФД = СтрокаТаблицы.ФД; ПолеФП = СтрокаТаблицы.ФП; Магазин = СтрокаТаблицы.Магазин; ИНН = СтрокаТаблицы.ИНН;	
	Расход = СтрокаТаблицы.ДокументРасхода; НаименованиеМагазина = СтрокаТаблицы.Магазин;
	ТекстОтветаСервера = СтрокаТаблицы.СуммаДокумента; ФормаОплаты = СтрокаТаблицы.ФормаОплаты;
	
	Чтение = Новый ЧтениеJSON;
	Чтение.УстановитьСтроку(СтрокаТаблицы.СодержимоеЧека);
	ОтветОбъектом = ПрочитатьJSON(Чтение);
	ПолучитьНаСервере(СтрокаТаблицы.ФН, СтрокаТаблицы.ФД, СтрокаТаблицы.ФП, ОтветОбъектом);
КонецПроцедуры

&НаКлиенте
Процедура КомандаПроверкаСоединения(Команда)
	ПолучитьДанныеССайтаНалоговой("");
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбрезатьСтрокиНаСервере()
	НЗ = РегистрыСведений.КлючевыеСловаОбъектов.СоздатьНаборЗаписей();
	НЗ.Прочитать();
	Для Каждого Зап Из НЗ Цикл
		Зап.КлючевоеСлово = СокрЛП (Зап.КлючевоеСлово);
	КонецЦикла;
	НЗ.Записать();
КонецПроцедуры

&НаКлиенте
Процедура ОбрезатьСтроки22(Команда)
	ОбрезатьСтрокиНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ИдентификаторОбъектаКонтакты = ОбщегоНазначения.ИдентификаторОбъектаМетаданных ("Справочник.Контакты");
	ИдентификаторОбъектаСтатьяРасходов = ОбщегоНазначения.ИдентификаторОбъектаМетаданных ("Справочник.СтатьиРасходов");
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДату(СтрокаДаты)
	ТипДаты = ФабрикаXDTO.Тип("http://www.w3.org/2001/XMLSchema", "dateTime");
	ТипаДата = ФабрикаXDTO.Создать(ТипДаты, СтрокаДаты);
	Возврат ТипаДата.Значение;
КонецФункции

&НаСервере
Процедура ВывестиОтветСервера (ОбъектВывода)
	Если ТипЗнч(ОбъектВывода) = Тип("Строка") Тогда
		ОтветСервера = ОбъектВывода;
	ИначеЕсли ТипЗнч(ОбъектВывода) = Тип("Массив") или ТипЗнч(ОбъектВывода) = Тип("Структура") Тогда
		// Формируем красивый вывод форматированного текста в окно ответа сервера
		Запись = Новый ЗаписьJSON;
		ПараметрЗаписи = Новый ПараметрыЗаписиJSON(,"   ");
		Запись.УстановитьСтроку(ПараметрЗаписи);
		ЗаписатьJSON(Запись,ОбъектВывода);
		ОтветСервера = Запись.Закрыть();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
//Описание: По выбору переключаемся на страницу загрузки чека.
Процедура СписокЧековВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ВыделенныеСтроки = Элементы.СписокЧеков.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество()=1 Тогда
		ЗагрузитьВыделенныйЧекСервер();
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.Основное;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбработкаОповещенияНаСервере(лСсылка)
	Если Не ЗначениеЗаполнено (лСсылка) Тогда Возврат; КонецЕсли;
		//Берем выделенную строку
	ВыделенныеСтроки = Элементы.СписокЧеков.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество()=1 Тогда
		СтрокаТаблицы = СписокЧеков.НайтиПоИдентификатору(Элементы.СписокЧеков.ТекущаяСтрока);
		Если СтрокаТаблицы.ДокументРасхода = лСсылка Тогда	//Ссылка была заполнена при создании документа.
			СтрокаТаблицы.ДокументРасходаПроведен = лСсылка.Проведен;
		КонецЕсли;

	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если нРег(ИмяСобытия) = нРег("Записана операция") Тогда
		лСсылка = Неопределено;
		Если ТипЗнч(Параметр) = Тип ("Структура") И Параметр.Свойство ("Ссылка", лСсылка) Тогда
			ОбработкаОповещенияНаСервере(лСсылка);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры


&НаСервереБезКонтекста
Функция ПолучитьСтатьюПоНаименованиюКлючевыеСлова(Наименование)
	СтрокаНаименования = СокрП(Наименование);
	МассивСлов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(СтрокаНаименования, " .,;:#№/""");
	
	ТекстЗапроса = "";
	
	ЭтоПервоеСлово = Истина;
	Для Каждого Слово из МассивСлов Цикл
		
		Если (СтрДлина(Слово) < 3) или  ЭтоЧисло(Слово) Тогда Продолжить; КонецЕсли;
		
		Подзапрос = "ВЫБРАТЬ
		|	КлючевыеСловаОбъектов.Объект,
		|	1 КАК Количество
		|//ПОМЕСТИТЬ Выборка
		|ИЗ
		|	РегистрСведений.КлючевыеСловаОбъектов КАК КлючевыеСловаОбъектов
		|ГДЕ
		|	КлючевыеСловаОбъектов.ИдентификаторОбъекта = &ИдентификаторОбъекта
		|";
		
		Если ЭтоПервоеСлово Тогда
			ЭтоПервоеСлово = Ложь;
			Подзапрос = СтрЗаменить(Подзапрос,"//ПОМЕСТИТЬ","ПОМЕСТИТЬ");
		Иначе
			Подзапрос =  "
			| Объединить все 
			|" +Подзапрос ;
		КонецЕсли;
		
		лСтруктЭкр = ЭкранироватьСпецСимволы (Слово);
		ТекстЗапроса = ТекстЗапроса + Подзапрос + 
			" И КлючевыеСловаОбъектов.КлючевоеСлово ПОДОБНО ""%#" + лСтруктЭкр.ЭкранированнаяСтрока + "%"" "+лСтруктЭкр.СпецСимвол; 
		
	КонецЦикла;
	ТекстЗапроса = ТекстЗапроса +
	";
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Выборка.Объект,
	|	СУММА(Выборка.Количество) КАК Количество
	|ИЗ
	|	Выборка КАК Выборка
	|
	|СГРУППИРОВАТЬ ПО
	|	Выборка.Объект
	|
	|УПОРЯДОЧИТЬ ПО
	|	Количество УБЫВ";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ИдентификаторОбъекта", ОбщегоНазначения.ИдентификаторОбъектаМетаданных ("Справочник.СтатьиРасходов"));
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() тогда
		Результат = Результат.Выгрузить();
		// Оставляем задел, чтобы можно было предложить несколько вариантов
		ВозвращаемоеЗначение = Результат[0].Объект;
	Иначе
		ВозвращаемоеЗначение = Неопределено;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
КонецФункции

&НаСервереБезКонтекста
//Описание: Проверяет, является ли строка числом. Есть 2 способа определения:
//	1. Проверить, что все символы - это цифры
//	2. Сделать попытку перевести в число. Есть только минусы: "0" не будет считаться числом и в случае исключения в Транзакции будут проблемы.
//
//Параметры:
//		Стр	- (Строка) проверяемая строка
//		Способ	- (Число) способ проверки числа. Если =0 тогда 1-й, иначе 2-й.
//
//Возвращаемое значение:
//		Истина	- строка является числом иначе - Ложь.
Функция ЭтоЧисло(Стр, Способ=0) Экспорт
	Если Не ЗначениеЗаполнено(Способ) Тогда
		Цифры = "1234567890";
		Для НомСимвола = 1 По СтрДлина(Стр) Цикл
			Если Найти(Цифры, Сред(Стр, НомСимвола, 1)) = 0 Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЦикла;
		Возврат Истина;
	Иначе
		Попытка
			Число = Число(Стр);
			Если Число = 0 Тогда
				Возврат Ложь;
			Иначе
				Возврат Истина;
			КонецЕсли;
		Исключение
			Возврат Ложь;
		КонецПопытки;
	КонецЕсли;
КонецФункции

&НаСервере
Функция СформироватьКомментарийСПараметрамиЧека(ДокОбъект)
	Если ПараметрыЧекаСовместимыМиниДеньги тогда 
		Коммент = "Заполнено по штрихкоду fn="+СокрЛП(ПолеФН)+"  fp="+СокрЛП(ПолеФП)+" i="+СокрЛП(ПолеФД);
	Иначе
		лКомментарий = "ФД="+СокрЛП(ПолеФД)+";ФН="+СокрЛП(ПолеФН)+";ФП="+СокрЛП(ПолеФП)+";";
		//Чтобы сохранить пользовательский комментарий...
		Если ЗначениеЗаполнено (ДокОбъект.Комментарий) Тогда
			МасКоммСтр = СтрРазделить (ДокОбъект.Комментарий, ";", Ложь);
			лИнд = МасКоммСтр.Количество();
			Пока лИнд > 0 Цикл
				лИнд = лИнд - 1;
				СтрКомм = МасКоммСтр[лИнд];
				Если Найти (СтрКомм, "ФД=") <> 0 ИЛИ Найти (СтрКомм, "ФН=") <> 0 ИЛИ Найти (СтрКомм, "ФП=") <> 0 Тогда
					МасКоммСтр.Удалить(лИнд);	//Убираем строку
				КонецЕсли;
			КонецЦикла;
			
			Если МасКоммСтр.Количество() = 0 Тогда
				нСтрКомм = "";
			Иначе
				нСтрКомм = СтрСоединить (МасКоммСтр, ";");
			КонецЕсли;
		КонецЕсли;
		
		Коммент = лКомментарий+нСтрКомм;
	КонецЕсли;
	Возврат Коммент;
КонецФункции

&НаКлиенте
Процедура КомандаОбработкаКлючевыхСлов(Команда)
	ВыделенныеСтроки = Элементы.СоставЧека.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество()=1 Тогда
		СтрокаТаблицы = СоставЧека.НайтиПоИдентификатору(Элементы.СоставЧека.ТекущаяСтрока);
		П = Новый Структура;
		П.Вставить("СтатьяРасходов", СтрокаТаблицы.СтатьяРасходов);
		П.Вставить("НаименованиеПокупки", СтрокаТаблицы.Наименование);
		
		// Чтобы упростить поддержку расширения и обработки - пытаемся открыть форму из расширения, если не получается - открываем обработку.
		Попытка
			ФормаКлючевыхСлов = ПолучитьФорму("Обработка.ЗагрузкаЧеков.Форма.ФормаКлючевыхСлов", П);
		Исключение
			ФормаКлючевыхСлов = ПолучитьФорму("ВнешняяОбработка.ЗагрузкаЧеков.Форма.ФормаКлючевыхСлов", П);
		КонецПопытки;

		ФормаКлючевыхСлов.Открыть();	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	СинхронизироватьСостояниеОтладки(Отказ);
КонецПроцедуры

&НаКлиенте
Процедура СинхронизироватьСостояниеОтладки(Отказ)
	Элементы.СохранитьВФайл.Видимость = ПараметрыОтладка;
КонецПроцедуры

&НаКлиенте
Процедура Сохранить(Команда)
	ИмяСохраняемогоФайла = "Обмен с сайтом nalog.ru.txt";
	АдресФайлаВоВременномХранилище = ПоместитьВоВременноеХранилище(ТекстОтветаСервера);
	ПолучитьФайл(АдресФайлаВоВременномХранилище,ИмяСохраняемогоФайла);
КонецПроцедуры


